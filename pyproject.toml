[project]
name = "smolarith"
description = "Soft-core arithmetic components written in Amaranth HDL"
authors = [
    {name = "William D. Jones", email = "thor0505@comcast.net"},
]
dependencies = [
    "amaranth>=0.5.0",
]
requires-python = ">=3.8"
readme = "README.md"
license = {file = "LICENSE.md"}
keywords = ["multiplication", "division", "HDL", "cpu"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Telecommunications Industry",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
]
dynamic = ["version"]

[project.urls]
documentation = "https://smolarith.readthedocs.io"
repository = "https://github.com/cr1901/smolarith"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pytest.ini_options]
# examples dir will eventually be committed.
addopts = "--doctest-glob=\"*.md\" --doctest-modules --ignore=examples"
pythonpath = [
  "src/",
]
required_plugins = "pytest-amaranth-sim"
long_vcd_filenames = true
extend_vcd_time = "41666666"  # extend by half a 12MHz period.

[tool.ruff]
src = [ "src", "tests" ]  # https://docs.astral.sh/ruff/faq/#how-does-ruff-determine-which-of-my-imports-are-first-party-third-party-etc
line-length = 79  # flake8 compat
# These will catch missing docstrings and other nits, which pydoclint doesn't.
# Also, add stable-but-disabled checks
lint.extend-select = ["E501", "D"]
lint.pydocstyle.convention = "numpy"
lint.pycodestyle.max-line-length = 79  # flake8 compat
# I don't see the need to document tests like they're a public API.
lint.per-file-ignores = { "tests/**/*.py" = ["D10"] }

[tool.pdm.version]
source = "scm"
write_to = "smolarith/version.txt"

[tool.pdm.dev-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-sphinx>=0.6.0",
    "pytest-amaranth-sim @ git+https://github.com/cr1901/pytest-amaranth-sim",
]
doc = [
    "sphinx>=7.1.2",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autobuild>=2021.3.14",
    "packaging>=24.0",  # Detect intersphinx mapping for amaranth, version for smolarith.
    "sphinx-prompt>=1.5.0",
]
lint = [
    "ruff>=0.2.2",
    "pydoclint[flake8]>=0.4.1",
]
builtin-yosys = [
    "amaranth[builtin-yosys]>=0.5.0",
]
bench = [
    "doit>=0.36.0",
]

[tool.pdm.scripts]
test = "pytest"
lint = { composite = ["ruff check", "flake8"] }
bench = "doit stats"
emit = "doit -r error-only emit_verilog"

doc = "sphinx-build doc/ doc/_build/"
# FIXME: pytest-sphinx doesn't catch all of these. Remove when it does.
doc-test = "sphinx-build -b doctest doc/ doc/_build"
doc-linkck = "sphinx-build doc/ doc/_linkcheck/ -b linkcheck"
doc-auto = "sphinx-autobuild doc/ doc/_build/ --watch src/smolarith"

[tool.pdm.scripts._add-ruff]
cmd = "pdm add --dev -G lint ruff"
env = { CARGO_PROFILE_RELEASE_LTO="false" }
help = "add Ruff linter on MSYS2- work around Rust issue #109797"

[tool.pdm.scripts._update-ruff]
cmd = "pdm update --dev -G lint ruff"
env = { CARGO_PROFILE_RELEASE_LTO="false" }
help = "update Ruff linter on MSYS2- work around Rust issue #109797"

[tool.doit.tasks.find_module]
module = "smolarith.div:MulticycleDiv"
width = 32
